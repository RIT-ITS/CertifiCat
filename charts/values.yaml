namespace: "certificat"

ingress:
  hostname: "certificat.rit.edu"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-passthrough: false
    nginx.ingress.kubernetes.io/proxy-read-timeout: 3600
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
    clawsreg: "true"

# If you need pull secrets, you're responsible for creating them by yourself
imagePullSecrets: 
  - name: gitlab-registry-pull-secret

certificat_image:
  repository: "registry.code.rit.edu/its-operations-public/django-acmev2"
  pullPolicy: "Always"
  # Provide a static tag, otherwise fall back to the chart appVersion
  #tag: 0.0.2.alpha.7

redis:
  image: "redis:7.2.4"

embedded_mariadb:
  enabled: True
  image: "mariadb:10.5.23-focal"

# These secrets contain bootstrap data. After the initial installation all 
# secrets will need to be edited within the cluster, and changes here
# will not take effect.
secretProviders:
  generated:
    enabled: true
    name: &generatedSecrets 'certificat-env-secret'
    type: 'Generated'
    keys: 
      - django_secret_key
      - mariadb_root_password
      - mariadb_password
      - redis_password

  certificat:
    enabled: true
    name: &certificatSecret 'certificat-file-secret'
    type: 'Opaque'
    initialData:
      # Minimal default config
      certificat.yml: |
        certificat:
          # Django secret key. Must be unique and unpredictable
          # This is generated by default in a secret
          # secret_key: ""

          # URL route to your application, no trailing slash.
          # Passed in as env variable by using ingress hostname
          # url_root: "https://acme.edu"

          # Certificate finalizer module, initially set to local, supports other 
          # backends like Sectigo
          finalizer_module: "certificat.modules.acme.backends.local.LocalFinalizer"

          # Login with "saml" or "local" accounts
          login_method: "saml"

          # Database connection parameters, defaults to using the embedded database
          db: 
            name: certificat
            user: certificat
            # Password is generated in a secret
            # password: ""
            host: mariadb-service.certificat

          redis:
            host: redis-service.certificat
            # Password is generated in a secret
            # password: ""

        saml:
          debug: False
          # Maps default attributes released by the InCommon federation
          # https://incommon.org/federation/attributes/

          # The format is "SAML attribute": "django user field"
          attribute_mapping:
            eduPersonPrincipalName: username
            mail: email
            givenName: first_name
            sn: last_name

          # Use a discovery service to select an IdP when logging in
          discovery:
            service: "https://service.seamlessaccess.org/ds"

          sp:
            # Provide your entity ID here. A good rule of thumb is
            # <base_url>/saml2/metadata/
            # This is constructed by using the hostname and passed as env
            # entity_id: "https://acme.edu/saml2/metadata/"
            key_file: "/srv/www/config/sp.key"
            cert_file: "/srv/www/config/sp.crt"
          idp:
            # Provide one or more local xml files for authorized IdPs
            #local: 
            #  - "/workspaces/certificat/src/certificat_dev/saml/local-idp.xml"
             
            # Provide one or more remote xml files for authorized IdPs with a 
            # included signing cert
            #remote:
            #  - url: http://identity.acme.edu/metadata
            #    cert: "/srv/www/config/identity.acme.edu.crt"

            # Use a metadata query service verified by a signing cert
            mdq: 
              - url: "http://mdq.incommon.org"
                cert: "/srv/www/config/inc-md-cert-mdq.pem"
                freshness_period: "P0Y0M0DT2H0M0S"
                
        local_finalizer:
          key: |
            -----BEGIN RSA PRIVATE KEY-----
            GENERATE YOUR OWN!
            -----END RSA PRIVATE KEY-----

          cert: |
            -----BEGIN CERTIFICATE-----
            GENERATE YOUR OWN!
            -----END CERTIFICATE-----  

      # Signing cert for InCommon metadata query service      
      inc-md-cert-mdq.pem: |
        -----BEGIN CERTIFICATE-----
        MIIEvjCCAyagAwIBAgIJANpi9/mkU/zoMA0GCSqGSIb3DQEBCwUAMHQxCzAJBgNV
        BAYTAlVTMQswCQYDVQQIDAJNSTESMBAGA1UEBwwJQW5uIEFyYm9yMRYwFAYDVQQK
        DA1JbnRlcm5ldDIuZWR1MREwDwYDVQQLDAhJbkNvbW1vbjEZMBcGA1UEAwwQbWRx
        LmluY29tbW9uLm9yZzAeFw0xODExMTMxNDI5NDNaFw0zODExMTAxNDI5NDNaMHQx
        CzAJBgNVBAYTAlVTMQswCQYDVQQIDAJNSTESMBAGA1UEBwwJQW5uIEFyYm9yMRYw
        FAYDVQQKDA1JbnRlcm5ldDIuZWR1MREwDwYDVQQLDAhJbkNvbW1vbjEZMBcGA1UE
        AwwQbWRxLmluY29tbW9uLm9yZzCCAaIwDQYJKoZIhvcNAQEBBQADggGPADCCAYoC
        ggGBAJ0+fUTzYVSP6ZOutOEhNdp3WPCPOYqnB4sQFz7IeGbFL1o0lZjx5Izm4Yho
        4wNDd0h486iSkHxNf5dDhCqgz7ZRSmbusOl98SYn70PrUQj/Nzs3w47dPg9Tpb/x
        y44PvNLS/rE56hPgCz/fbHoTTiJt5eosysa1ZebQ3LEyW3jGm+LGtLbdIfkynKVQ
        vpp1FVeCamzdeB3ZRICAvqTYQKE1JQDGlWrEsSW0VVEGNjfbzMzr/g4l8JRdMabQ
        Jig8tj3UIXnu7A2CKSMJSy3WZ3HX+85oHEbL+EV4PtpQz765c69tUIdNTJax9jQ2
        1c3wL0K27HE8jSRlrXImD50R3dXQBKH+iiynBWxRPdyMBa1YfK+zZEWPbLHshSTc
        9hkylQv3awmPR/+Plz5AtTpe5yss/Ifyp01wz1jt42R+6jDE+WbUjp5XDBCAjGEE
        0FPaYtxjZLkmNl367bdTN12OIn/ixPNH+Z/S/4skdBB9Gc4lb2fEBywJQY0OYNOd
        WOxmPwIDAQABo1MwUTAdBgNVHQ4EFgQUMHZuwMaYSJM5mlu3Wc4Ts5xq4/swHwYD
        VR0jBBgwFoAUMHZuwMaYSJM5mlu3Wc4Ts5xq4/swDwYDVR0TAQH/BAUwAwEB/zAN
        BgkqhkiG9w0BAQsFAAOCAYEAMr4wfLrSoPTzfpXtvL+2vrKBJNnRfuJpOYTbPKUc
        DOP2QfzRlczi7suYJvd5rLiRonq8rjyPUyM8gvTfbTps+JhJ6S9mS6dTBxOV1qPZ
        3Ab+XKmq8LUtguGRabKgJgmJH0+inR/wVoal7EVHcWXfij9AT8DZOXW88shc6grh
        jUaFZBu/2+q8c8ee0e4ip8B+CVEnCwDKI0d+nTcSmPvAE34CNa33F+QGpXawv5yv
        VvIpSaLAeFQhc/jKcnNHfy+Zi7JmSnKZiMvQCbWANQmDjHg7pGmBW9nyQcm6P2/B
        0AVcEj1YTpAR8Mbh1pUdIhoB+chaNnFEIZsXeRsdbbAFpxodInlJ7WekfuvSQ6sU
        EXpoyBGOeuuTmR1va8k3QeL8Wc4yNu/g5LwjmtvPrh2jBF8xujc4J6VzP8K2BjA4
        xk4LnXgjHOT93dBAJhVYJkykDHwyvHUvsBHoP6lfjrt5P8zunK2mdP/AZKik+Rdt
        1GGlErV2AyWShTOaDLW6NxdP
        -----END CERTIFICATE-----

      sp.key: |
        -----BEGIN PRIVATE KEY-----        
            GENERATE YOUR OWN!        
        -----END PRIVATE KEY-----

      sp.crt: |
        -----BEGIN CERTIFICATE-----        
            GENERATE YOUR OWN!        
        -----END CERTIFICATE-----

# Exposes secrets as environment variables to the containers  
certificat_secrets:
  - from: *generatedSecrets
    mapping:
      CERTIFICAT__SECRET_KEY: django_secret_key
      CERTIFICAT__DB__PASSWORD: mariadb_password
      CERTIFICAT__REDIS__PASSWORD: redis_password

mariadb_secrets:
  - from: *generatedSecrets
    mapping:
      MARIADB_PASSWORD: mariadb_password
      MARIADB_ROOT_PASSWORD: mariadb_root_password
      
redis_secrets:
  - from: *generatedSecrets
    mapping:
      REDIS_PASSWORD: redis_password
      













# cluster_issuer: letsencrypt-prod
# ingress_ssl_passthrough: false
# ingress_proxy_read_timeout: 3600
# # note true is a string value
# clawsreg: "true"

# log_response: "False"

# secretProviders:
#   sops:
#     enabled: true
#     name: 'sops-gpg'
#     type: 'Secret'
#     data: 'sops'
#   main: 
#     enabled: true
#     name: &mainSecret 'acme-proxy-secrets'
#     type: 'Opaque'
#     data: 'main'
#   saml:
#     enabled: true
#     name: 'acme-proxy-saml-secrets'
#     type: 'Opaque'
#     data: 'saml'
#   mainRegistryCredentials:
#     enabled: true
#     name: &gitlabPullSecret 'gitlab-registry-pull-secret'
#     type: "kubernetes.io/dockerconfigjson"
#     data: "registry"
#   testingRegistryCredentials:
#     enabled: true
#     namespace: "acme-proxy-testing"
#     name: *gitlabPullSecret
#     type: "kubernetes.io/dockerconfigjson"
#     data: "registry"
#   proxyTesterAccount:
#     enabled: false
#     name: &proxyTesterSecret 'proxy-tester-account'
#     namespace: "acme-proxy-testing"
#     type: 'Opaque'
#     data: 'proxy_tester'



# image:
#   repository: registry.code.rit.edu/its-operations/acme-proxy
#   pullPolicy: Always  
#   # Override in the vars.yaml for your environment
#   hostname: None
#   service:
#     port: 8000
#   secrets:
#     - from: *mainSecret
#       mapping:
#         ACME_DBHANDLER_SERVER: db_host
#         ACME_DBHANDLER_DATABASE: db_database
#         ACME_DBHANDLER_USERNAME: db_user
#         ACME_DBHANDLER_PASSWORD: db_password
#         ACME_DEFAULT_SECRET_KEY: django_secret_key
#         ACME_CABACKEND_API_USER: ca_api_user
#         ACME_CABACKEND_API_PASSWORD: ca_api_password
#         ACME_CABACKEND_APPROVAL_API_USER: ca_approval_api_user
#         ACME_CABACKEND_APPROVAL_API_PASSWORD: ca_approval_api_password
#         ACME_REDIS_PASSWORD: redis_password

# proxy_tester:
#   enabled: false
#   namespace: "acme-proxy-testing"  
#   hostname: "acme-testing.rit.edu"
#   repository: registry.code.rit.edu/its-operations/acme-proxy/certbot-tester
#   secrets:
#     - from: *proxyTesterSecret
#       mapping: 
#         PROXY_TESTER_CERTBOT_ACCOUNT: certbot_account

# mariadb:
#   enabled: false
#   image: "mariadb:10.5.23-focal"
#   persistentVolumeClaim: mariadb-volume-claim
#   secrets:
#     - from: *mainSecret
#       mapping:
#         MARIADB_ROOT_PASSWORD: mariadb_root_password
#         ACME_DATABASE: db_database
#         ACME_USERNAME: db_user
#         ACME_PASSWORD: db_password

# redis:
#   image: "redis:7.2.4"
#   secrets:
#     - from: *mainSecret
#       mapping:
#         REDIS_PASSWORD: redis_password